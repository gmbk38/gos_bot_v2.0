import logging
from admin import *
from users import *
from extra import chat_type as ct, was_admin
from logs import User_log as ul

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

API_TOKEN = '5683599741:AAEAaqWehHZX9zzDyEvH9q3g0D3tHDaVR-I'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

admin = False
user = ul()

search = False

@dp.message_handler(commands=['access'])
async def startAns(message: types.Message):

    global admin

    if len(message.text.split()) != 3 or not isAdmin (message.text.split()[1], message.text.split()[2]):
        await message.answer(f'–û—à–∏–±–∫–∞!\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')

    else:
        await message.answer(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}\n–í—ã –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup=admin_main_kb())
        admin = True


@dp.message_handler(commands=['start'])
async def startAns(message: types.Message):

    if not ct(message):
        user.id = message.chat.id
        user.name = message.chat.title
        user.user_record()
        return False
        
    await message.answer(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}\n–ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?', reply_markup=main_kb())

    user.id = message.chat.id
    user.name = message.from_user.username
    user.user_record()


@dp.message_handler(commands=['upd'])
async def updAns(message: types.Message):

    global admin

    if len(message.text.split()) != 3 or not admin:
        await message.answer(f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö, –≤ –ª–æ–≥–∏–Ω–µ –∏ –ø–∞—Ä–æ–ª–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–æ–±–µ–ª–æ–≤')
    else:
        updLogin(message.text)
        await message.answer(f'–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é')
        admin = False


@dp.message_handler(commands=['spam'])
async def spamAns(message: types.Message):

    global admin

    if not admin:
        await message.answer(f'–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
    else:
        msg = message.text.split(' ', 1)[1]
        users = msgToAll()
        for id in users:
            await bot.send_message(id, msg)
        await message.answer(f'–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞')  


@dp.message_handler(content_types=['text'])
async def searchAns(message: types.Message):

    global search

    if search:
        if len(infoSearch(message.text)) == 0:
            await bot.send_message(message.chat.id, '–ü–æ –¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
        else:
            data = infoSearch(message.text)
            msg = f'–¢–µ–∫—Å—Ç "{message.text}" –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö:\n\n'
            for el in data:
                line = f'{el[0]} ‚ñ∂‚ñ∂‚ñ∂ {el[1]}\n\n'
                msg += line
            await bot.delete_message(message.chat.id, message.message_id - 1)
            await bot.send_message(message.chat.id, msg)
            await bot.send_message(message.chat.id, f'–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤—ã—à–µ!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=main_kb())
            search = False
    else:
        await bot.send_message(message.chat.id, '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∏—Å–∫ üîé –≤ –º–µ–Ω—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏')


@dp.callback_query_handler()
async def btnAns(callback: types.CallbackQuery):

    global admin
    global search

    if len(callback.data) == 1:
        # –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        await callback.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å', reply_markup=q_kb(callback.data))

    elif len(callback.data.split('_')[0]) == 1 and len(callback.data.split('_')) == 2:
        aData, fData, kb = a_kb(callback.data.split('_'))
        try:
            await bot.send_document(callback.message.chat.id, open(f'files/{fData}', 'rb'))
            await callback.message.delete()
            await bot.send_message(callback.message.chat.id, f'{aData}', reply_markup=kb)
        except Exception as ex:
            await callback.message.edit_text(f'{aData}', reply_markup=kb)

    elif callback.data[:3] == 'faq':
        if len(callback.data) == 3:
            await callback.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å', reply_markup=faq_kb(callback.data))
        else:
            ans, kb = faq_ans_kb(callback.data)
            await callback.message.edit_text(f'{ans}', reply_markup=kb)

    elif callback.data.split('_')[0] == 'addstats':
        addStats(callback.data)
        await callback.message.edit_text(f'–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=main_kb())

    elif callback.data[:6] == 'search':
            search = True
            await callback.message.edit_text(f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞\n\n', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="exit")))
    
    elif callback.data[:5] == 'terms':
        if len(callback.data.split('_')) == 1:
            await callback.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ç–µ—Ä–º–∏–Ω\n\n', reply_markup=terms_kb(callback.data))
        else:
            aData, fData, kb = terms_kb(callback.data)
            try:
                await bot.send_document(callback.message.chat.id, open(f'files/{fData}', 'rb'))
                await callback.message.delete()
                await bot.send_message(callback.message.chat.id, f'{aData}', reply_markup=kb)
            except Exception as ex:
                await callback.message.edit_text(f'{aData}', reply_markup=kb)
            
    elif callback.data == 'exit':
        search = False
        await callback.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=main_kb())


    # –†–∞–±–æ—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∞–¥–º–∏–Ω–∞
    elif callback.data.split('_')[0] == 'admin' and not admin:
        await callback.message.edit_text(f'–°–ø–µ—Ä–≤–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥')
    else:

        if callback.data.split('_')[1] == 'login':
            await callback.message.edit_text(f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:\n\n/upd –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å', reply_markup=admin_back_btn())

        if callback.data.split('_')[1] == 'faq':
            await callback.message.edit_text(f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:\n\n/faq  –ø–∞—Ä–æ–ª—å')
            # =========================================================================================================================================================

        if callback.data.split('_')[1] == 'spam':
            await callback.message.edit_text(f'–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:\n\n/spam —Å–æ–æ–±—â–µ–Ω–∏–µ', reply_markup=admin_back_btn())

        if callback.data.split('_')[1] == 'stats':
            await callback.message.edit_text(f'{getStats()}', reply_markup=admin_back_btn())

        if callback.data.split('_')[1] == 'back':
            await callback.message.edit_text(f'–í—ã –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup=admin_main_kb())

        if callback.data.split('_')[1] == 'exit':
            admin = False
            await callback.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=main_kb())

executor.start_polling(dp, skip_updates=True)